pve1 = pve1, pve2 = pve2, k = k, bs0 = bs0)
}else{
cur.train = multilevel_exponential_fpca(X_dat_m, J,
pve1 = pve1, pve2 = pve2, k = k, bs0 = bs0)
}
mu_t_hat = cur.train$mu_hat
eigen_vals1 = cur.train$eigen_vals1
eigen_funcs1 = cur.train$eigen_funcs1
eigen_vals2 = cur.train$eigen_vals2
eigen_funcs2 = cur.train$eigen_funcs2
posting_days = (rowSums(X_dat_m)>1)
s_mat_hat_train = t(matrix(as.numeric(matrix(posting_days, nrow = J)), nrow = J))
scores_train = estimate_scores(X_dat_m, s_mat = s_mat_train, I=N,  J=J,
eigen_vals1, eigen_vals2,
eigen_funcs1, eigen_funcs2, mu_t_hat)
return_vals = list( )
return_vals$scores_train = scores_train
return_vals$eigen_funcs1 = eigen_funcs1
return_vals$eigen_vals1 = eigen_vals1
return_vals$eigen_funcs2 = eigen_funcs2
return_vals$eigen_vals2 = eigen_vals2
return_vals$static_covariates = static_covariates
return_vals$classes = Ys_train
return_vals$mu_t = mu_t_hat
return_vals$gAR = gAR
return_vals$J = J
if(gAR){
gar_models_ls = list()
ng = length(unique(Ys_train))
for(l in 1:ng){
gar_models_ls[[l]] = fit_ajs_model(l, q, s_mat_hat_train, classes = Ys_train, static_train = gar_covariates)
}
return_vals$gar_models_ls = gar_models_ls
return_vals$s_mat_train = s_mat_train
return_vals$q = q
return_vals$gar_covariates = gar_covariates
}
return(gsFPCA.model = return_vals)
}
###
# wrapping function for single level fpca
#' @curves N x m matrix of binary data
#' @static_covariates N x Q dataframe of covariates
#' @pve Proportion of varation explained
#' @return A matrix of the infile
#' @export
###
gmFPCA_predict <- function(gmFPCA.model, X_dat_m_new, covariates_new = NA, gar_covariates_new = NA){
scores_train = gmFPCA.model$scores_train
eigen_funcs1 = gmFPCA.model$eigen_funcs1
eigen_vals1 = gmFPCA.model$eigen_vals1
eigen_funcs2 = gmFPCA.model$eigen_funcs2
eigen_vals2 = gmFPCA.model$eigen_vals2
static_covariates = gmFPCA.model$static_covariates
Ys_train  = gmFPCA.model$classes
mu_t_hat = gmFPCA.model$mu_t
gAR = gmFPCA.model$gAR
J = gmFPCA.model$J
static_covariates_test = covariates_new
X_dat_m_test = X_dat_m_new
gar_covariates_test = gar_covariates_new
#N_test = dim(X_dat_new)[1]
#X_dat_m_test = t(matrix(t(X_dat_new), nrow = N*J))
X_dat_m_test = X_dat_m_new
if(gAR){
gar_models_ls = gmFPCA.model$gar_models_ls
s_mat_train  = gmFPCA.model$s_mat_train
gar_covariates = gmFPCA.model$gar_covariates
q = gmFPCA.model$q
}
#if vector
if(is.null(dim(eigen_funcs1))){
matrix(eigen_funcs1, ncol = 1)
}
if(D != dim(eigen_funcs1)[1]){
stop("Dimensions of new curves do not match eigenfunctions length")
}
D = dim(X_dat_m_test)[2]
N_test = dim(X_dat_m_test)[1]/J
tt=seq(0,1, len=D)
if(!is.na(static_covariates_test)[1]){
if((N_test != (dim(static_covariates_test)[1]))){
stop("Dimensions of Covariates and Binary Curves do not match")
}
}
J_test = J
posting_days = 1-(rowSums(X_dat_m_test)==0)
s_mat_test = t(matrix(as.numeric(matrix(posting_days, nrow = J_test)), nrow = J_test))
Js_s_test = rowSums(s_mat_test)
#X_dat_s_test = t(matrix(c(t(X_dat_m_test)), ncol = N_test))
#estimate scores testing set
scores_test=estimate_scores(X_dat_m_test, s_mat = s_mat_test, I=N_test, J=J_test,
eigen_vals1, eigen_vals2,
eigen_funcs1, eigen_funcs2, mu_t_hat)
#step 4
prior_g = c(table(Ys_train)/length(Ys_train))
if(!gAR){
if(is.na(static_covariates)[1]){
guess = nb_updated_grid_scores_only(scores_train,
Ys_train,
prior_g, scores_test,
min.h = 0.3, max.h = 1.5)
}else{
numeric_cols = which(sapply(static_covariates, is.numeric))
cur.mat = data.matrix(static_covariates[,numeric_cols])
scores_train2 = cbind(scores_train, cur.mat)
cur.mat = data.matrix(static_covariates_test[,numeric_cols])
scores_test2 = cbind(scores_test, cur.mat)
#need to update the categorical data
cat_covariates_train  = static_covariates[,-numeric_cols]
cat_covariates_test  = static_covariates_test[,-numeric_cols]
#need to update for categorical variables
guess = nb_updated_grid_scores_cat_only(scores_train2, cat_covariates_train,
Ys_train,
prior_g, scores_test2, cat_covariates_test,
min.h = 0.3, max.h = 1.5)
}
}else{
if(is.na(static_covariates)[1]){
guess = nb_updated_grid(scores = scores_train, classes = Ys_train,
prior_g = c(table(Ys_train)/length(Ys_train)),
scores_test =  scores_test,
s_mat_hat_test =  s_mat_test,
s_mat_hat_train =  s_mat_train,
P_max = q,
static_train = gar_covariates,
static_test = gar_covariates_test)
}else{
numeric_cols = which(sapply(static_covariates, is.numeric))
cur.mat = data.matrix(static_covariates[,numeric_cols])
scores_train2 = cbind(scores_train, cur.mat)
cur.mat = data.matrix(static_covariates_test[,numeric_cols])
scores_test2 = cbind(scores_test, cur.mat)
#need to update the categorical data
cat_covariates_train  = static_covariates[,-numeric_cols]
cat_covariates_test  = static_covariates_test[,-numeric_cols]
if(dim(cat_covariates_train)[2]==0){
cat_covariates_train  = NA
cat_covariates_test  = NA
#need to update for categorical variables
guess = nb_updated_grid(scores = scores_train2, classes = Ys_train,
prior_g = c(table(Ys_train)/length(Ys_train)),
scores_test =  scores_test2,
s_mat_hat_test =  s_mat_test,
s_mat_hat_train =  s_mat_train,
P_max = q,
static_train = gar_covariates,
static_test = gar_covariates_test)
}else{
#need to update for categorical variables
guess = nb_updated_grid_cat(scores = scores_train2, classes = Ys_train,
cat_covariates_train, cat_covariates_test,
prior_g = c(table(Ys_train)/length(Ys_train)),
scores_test =  scores_test2,
s_mat_hat_test =  s_mat_test,
s_mat_hat_train =  s_mat_train,
P_max = q,
static_train = gar_covariates,
static_test = gar_covariates_test)
}
#update for categorical variables
}
}
return(new_groups = guess)
}
gMFPCA
X_dat_m = t(matrix(t(X_dat_train), nrow = 48))
X_dat_m
exp(0.1)/exp(0.1)
exp(0.1)/(1-exp(0.9))
exp(0.1)/(1-exp(0.1))
logit(0.1)
exp(0.1)/(1+exp(0.1))
exp(0.1)*(1-exp(0.1))
exp(0.05)*(1-exp(0.05))
exp(0.05)/(1+exp(0.05))
X_dat_m_train = t(matrix(t(X_dat_train), nrow = 48))
X_dat_m_test = t(matrix(t(X_dat_test), nrow = 48))
save(X_dat_m_train, file="D:/Research/Staicu/R_package/Package/gFPCAClassif/data/X_dat_m_train.rda")
save(X_dat_m_test, file="D:/Research/Staicu/R_package/Package/gFPCAClassif/data/X_dat_m_test.rda")
library(gFPCAClassif)
library(gFPCAClassif)
X_dat_m_train
X_dat_m_test
dim(X_dat_m)
dim(X_dat_m_train)
gMFPCA
gmfpca.cur = gMFPCA(X_dat = X_dat_m_train,
Ys = acc_data_train$group, J = 14, N=400,
covariates = NA, gAR = T, pve1 = 0.95,
pve2 = 0.75, q = 3, approximation = "linear")
matplot(gmfpca.cur$gAR)
summary(gmfpca.cur$gAR)
gmfpca.cur$gAR
summary(gmfpca.cur$gar_models_ls)
summary(gmfpca.cur$gar_models_ls[[1]])
gmfpca.cur$gar_models_ls[[1]]
library(gFPCAClassif)
gmfpca.cur = gMFPCA(X_dat = X_dat_m_train,
Ys = acc_data_train$group, J = 14, N=400,
covariates = NA, gAR = T, pve1 = 0.95,
pve2 = 0.75, q = 3, approximation = "linear")
gmfpca.cur$gar_models_ls[[1]]
gmFPCA.results = gmFPCA_predict(gmfpca.cur,
X_dat_m_new = X_dat_m_test)
D
maplot(gmfpca.cur$eigen_funcs1)
matplot(gmfpca.cur$eigen_funcs1)
dim(X_dat_m_test)
dim(X_dat_m_train$eigen_funcs1)[1]
gmFPCA_predict <- function(gmFPCA.model, X_dat_m_new, covariates_new = NA, gar_covariates_new = NA){
scores_train = gmFPCA.model$scores_train
eigen_funcs1 = gmFPCA.model$eigen_funcs1
eigen_vals1 = gmFPCA.model$eigen_vals1
eigen_funcs2 = gmFPCA.model$eigen_funcs2
eigen_vals2 = gmFPCA.model$eigen_vals2
static_covariates = gmFPCA.model$static_covariates
Ys_train  = gmFPCA.model$classes
mu_t_hat = gmFPCA.model$mu_t
gAR = gmFPCA.model$gAR
J = gmFPCA.model$J
static_covariates_test = covariates_new
X_dat_m_test = X_dat_m_new
gar_covariates_test = gar_covariates_new
D = dim(X_dat_m_new)[2]
#N_test = dim(X_dat_new)[1]
#X_dat_m_test = t(matrix(t(X_dat_new), nrow = N*J))
X_dat_m_test = X_dat_m_new
if(gAR){
gar_models_ls = gmFPCA.model$gar_models_ls
s_mat_train  = gmFPCA.model$s_mat_train
gar_covariates = gmFPCA.model$gar_covariates
q = gmFPCA.model$q
}
#if vector
if(is.null(dim(eigen_funcs1))){
matrix(eigen_funcs1, ncol = 1)
}
if(D != dim(eigen_funcs1)[1]){
stop("Dimensions of new curves do not match eigenfunctions length")
}
D = dim(X_dat_m_test)[2]
N_test = dim(X_dat_m_test)[1]/J
tt=seq(0,1, len=D)
if(!is.na(static_covariates_test)[1]){
if((N_test != (dim(static_covariates_test)[1]))){
stop("Dimensions of Covariates and Binary Curves do not match")
}
}
J_test = J
posting_days = 1-(rowSums(X_dat_m_test)==0)
s_mat_test = t(matrix(as.numeric(matrix(posting_days, nrow = J_test)), nrow = J_test))
Js_s_test = rowSums(s_mat_test)
#X_dat_s_test = t(matrix(c(t(X_dat_m_test)), ncol = N_test))
#estimate scores testing set
scores_test=estimate_scores(X_dat_m_test, s_mat = s_mat_test, I=N_test, J=J_test,
eigen_vals1, eigen_vals2,
eigen_funcs1, eigen_funcs2, mu_t_hat)
#step 4
prior_g = c(table(Ys_train)/length(Ys_train))
if(!gAR){
if(is.na(static_covariates)[1]){
guess = nb_updated_grid_scores_only(scores_train,
Ys_train,
prior_g, scores_test,
min.h = 0.3, max.h = 1.5)
}else{
numeric_cols = which(sapply(static_covariates, is.numeric))
cur.mat = data.matrix(static_covariates[,numeric_cols])
scores_train2 = cbind(scores_train, cur.mat)
cur.mat = data.matrix(static_covariates_test[,numeric_cols])
scores_test2 = cbind(scores_test, cur.mat)
#need to update the categorical data
cat_covariates_train  = static_covariates[,-numeric_cols]
cat_covariates_test  = static_covariates_test[,-numeric_cols]
#need to update for categorical variables
guess = nb_updated_grid_scores_cat_only(scores_train2, cat_covariates_train,
Ys_train,
prior_g, scores_test2, cat_covariates_test,
min.h = 0.3, max.h = 1.5)
}
}else{
if(is.na(static_covariates)[1]){
guess = nb_updated_grid(scores = scores_train, classes = Ys_train,
prior_g = c(table(Ys_train)/length(Ys_train)),
scores_test =  scores_test,
s_mat_hat_test =  s_mat_test,
s_mat_hat_train =  s_mat_train,
P_max = q,
static_train = gar_covariates,
static_test = gar_covariates_test)
}else{
numeric_cols = which(sapply(static_covariates, is.numeric))
cur.mat = data.matrix(static_covariates[,numeric_cols])
scores_train2 = cbind(scores_train, cur.mat)
cur.mat = data.matrix(static_covariates_test[,numeric_cols])
scores_test2 = cbind(scores_test, cur.mat)
#need to update the categorical data
cat_covariates_train  = static_covariates[,-numeric_cols]
cat_covariates_test  = static_covariates_test[,-numeric_cols]
if(dim(cat_covariates_train)[2]==0){
cat_covariates_train  = NA
cat_covariates_test  = NA
#need to update for categorical variables
guess = nb_updated_grid(scores = scores_train2, classes = Ys_train,
prior_g = c(table(Ys_train)/length(Ys_train)),
scores_test =  scores_test2,
s_mat_hat_test =  s_mat_test,
s_mat_hat_train =  s_mat_train,
P_max = q,
static_train = gar_covariates,
static_test = gar_covariates_test)
}else{
#need to update for categorical variables
guess = nb_updated_grid_cat(scores = scores_train2, classes = Ys_train,
cat_covariates_train, cat_covariates_test,
prior_g = c(table(Ys_train)/length(Ys_train)),
scores_test =  scores_test2,
s_mat_hat_test =  s_mat_test,
s_mat_hat_train =  s_mat_train,
P_max = q,
static_train = gar_covariates,
static_test = gar_covariates_test)
}
#update for categorical variables
}
}
return(new_groups = guess)
}
gmFPCA.results = gmFPCA_predict(gmfpca.cur,
X_dat_m_new = X_dat_m_test)
table(gsFPCA.results, acc_data_test$group)
table(gmFPCA.results, acc_data_test$group)
x = 0.01
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = invlogit(0.01)
x
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.01)
x
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.1)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.5)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.25)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.15)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
gmfpca.cur$gar_models_ls[[1]]
table(gmFPCA.results, acc_data_test$group)
gmfpca.cur.exp$gar_models_ls[[2]]
gmfpca.cur$gar_models_ls[[2]]
gmfpca.cur
matplot(gmFPCA.model$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gsFPCA Eigenfunctions", xaxt="n")
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gsFPCA Eigenfunctions", xaxt="n")
48/4
(0:12)
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gsFPCA Eigenfunctions", xaxt="n")
axis(1, at = (0:4)*12, labels = 1:14)
(0:4)*12
((0:4)*12)/2
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gsFPCA Eigenfunctions", xaxt="n")
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"))
legend("topright", legend=c(colnames(gsFPCA.model$scores_train)),
col=1:length(colnames(gsFPCA.model$scores_train)), lty=1, lwd=2)
colnames(gmfpca.cur$scores_train)
gmfpca.cur$eigen_funcs1
gmfpca.cur
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gsFPCA Eigenfunctions", xaxt="n")
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"))
legend("topright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2)
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gsFPCA Eigenfunctions", xaxt="n")
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"))
legend("bottomright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2)
text_size = 2
jpeg(file="figures/gmFPCA_eigenfunctions1.jpeg", width=750, height=500)
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gsFPCA Eigenfunctions", xaxt="n")
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"))
legend("bottomright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2)
dev.off()
name(gmFPCA.results)
names(gmFPCA.results)
names(gmFPCA.cur)
names(gmfpca.cur)
text_size = 2
jpeg(file="figures/gmFPCA_eigenfunctions1.jpeg", width=750, height=500)
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gMFPCA First Level Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size)
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"), cex = text_size)
legend("bottomright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2, cex = text_size)
dev.off()
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gMFPCA First Level Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size)
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"), cex.axis = text_size)
legend("bottomright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2, cex = text_size)
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gMFPCA First Level Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size, cex.axis = text_size)
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"), cex.axis = text_size)
legend("bottomright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2, cex = text_size)
text_size = 1.6
jpeg(file="figures/gmFPCA_eigenfunctions1.jpeg", width=750, height=500)
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gMFPCA First Level Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size, cex.axis = text_size)
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"), cex.axis = text_size)
legend("bottomright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2, cex = text_size)
dev.off()
text_size = 1.75
jpeg(file="figures/gmFPCA_eigenfunctions1.jpeg", width=750, height=500)
matplot(gmfpca.cur$eigen_funcs1, type="l", lwd = 3, lty = 1,
xlab = "Time", main = "gMFPCA First Level Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size, cex.axis = text_size)
axis(1, at = (0:4)*12, labels = c("12am", "6am", "12pm", "6pm", "12am"), cex.axis = text_size)
legend("bottomright", legend=c(1:length(gmfpca.cur$eigen_vals1)),
col=1:length(gmfpca.cur$eigen_vals1), lty=1, lwd=2, cex = text_size)
dev.off()
library(gFPCAClassif)
dim(X_dat_m)
dim(X_dat_m_test)
gmfpca.cur = gMFPCA(X_dat = X_dat_m_train,
Ys = acc_data_train$group, J = 14, N=400,
covariates = NA, gAR = T, pve1 = 0.95,
pve2 = 0.95, q = 3, approximation = "linear")
gmfpca.cur$gar_models_ls[[2]]
gsFPCA.model = gsFPCA(X_dat_s = X_dat_train,
Ys = acc_data_train$group, covariates = NA,
pve = 0.95, Kb = 10, bs0="cr")
matplot(gsFPCA.model$eigen_funcs, type="l", lwd = 3, lty = 1,
xlab = "Day", main = "gsFPCA Eigenfunctions", xaxt="n")
axis(1, at = (0:13)*48+1, labels = 1:14)
legend("topright", legend=c(colnames(gsFPCA.model$scores_train)),
col=1:length(colnames(gsFPCA.model$scores_train)), lty=1, lwd=2)
jpeg(file="figures/gsFPCA_eigenfunctions.jpeg", width=750, height=500)
matplot(gsFPCA.model$eigen_funcs, type="l", lwd = 3, lty = 1,
xlab = "Day", main = "gsFPCA Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size, cex.axis=text_size)
axis(1, at = (0:13)*48+1, labels = 1:14, cex.axis = text_size)
legend("topright", legend=c(colnames(gsFPCA.model$scores_train)),
col=1:length(colnames(gsFPCA.model$scores_train)), lty=1, lwd=2, cex = text_size)
dev.off()
jpeg(file="figures/gsFPCA_eigenfunctions.jpeg", width=750, height=500)
matplot(gsFPCA.model$eigen_funcs, type="l", lwd = 3, lty = 1,
xlab = "Day", main = "gsFPCA Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size, cex.axis=text_size)
axis(1, at = (0:13)*48+1, labels = 1:14, cex.axis = text_size)
legend("topright", legend=1:3),
col=1:length(colnames(gsFPCA.model$scores_train)), lty=1, lwd=2, cex = text_size)
jpeg(file="figures/gsFPCA_eigenfunctions.jpeg", width=750, height=500)
dev.off()
text_size = 1.75
jpeg(file="figures/gsFPCA_eigenfunctions.jpeg", width=750, height=500)
matplot(gsFPCA.model$eigen_funcs, type="l", lwd = 3, lty = 1,
xlab = "Day", main = "gsFPCA Eigenfunctions", xaxt="n",
cex.main=text_size, cex.lab=text_size, cex.axis=text_size)
axis(1, at = (0:13)*48+1, labels = 1:14, cex.axis = text_size)
legend("topright", legend=1:3,
col=1:length(colnames(gsFPCA.model$scores_train)), lty=1, lwd=2, cex = text_size)
dev.off()
?matplot
legend=1:3
legend
remove(legend)
paste("k=",1:3)
paste("k=",1:3, sep = "")
gmfpca.cur
gmfpca.cur$eigen_vals2
matplot(gmfpca.cur$eigen_vals2, type="l")
matplot(gmfpca.cur$eigen_funcs2, type="l")
gmfpca.cur$gar_models_ls[[1]]
x = logit(0.15)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.10)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.05)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
x = logit(0.25)
exp(x)/(1 + exp(x))
exp(x)*(1−exp(x))
?refund::fpca.face
use_readme_rmd(open = rlang::is_interactive())
install.packages("usethis")
library(usethis)
use_readme_rmd(open = rlang::is_interactive())
100-18
